{"meta":{"title":"z00o","subtitle":"","description":"Git Hexo Html","author":"yang","url":"https://ylfei.github.io"},"pages":[{"title":"关于","date":"2023-04-28T10:30:39.000Z","updated":"2024-01-09T05:47:42.150Z","comments":true,"path":"about/index.html","permalink":"https://ylfei.github.io/about/index.html","excerpt":"","text":""},{"title":"","date":"2025-05-07T08:49:16.149Z","updated":"2025-05-07T08:49:16.149Z","comments":true,"path":"runtime/runtime.js","permalink":"https://ylfei.github.io/runtime/runtime.js","excerpt":"","text":"setInterval(() =&gt; { let create_time = Math.round(new Date('2018-10-12 10:00:00').getTime() / 1000); //xxxx-xx-xx xx:xx:xx的格式为，例：2020-12-26 00:00:00 let timestamp = Math.round((new Date().getTime() + 8 * 60 * 60 * 1000) / 1000); let second = timestamp - create_time; let time = new Array(0, 0, 0, 0, 0); //年 if (second &gt;= 365 * 24 * 3600) { time[0] = parseInt(second / (365 * 24 * 3600)); second %= 365 * 24 * 3600; } //天 if (second &gt;= 24 * 3600) { time[1] = parseInt(second / (24 * 3600)); second %= 24 * 3600; } //时 if (second &gt;= 3600) { time[2] = parseInt(second / 3600); second %= 3600; } //分 if (second &gt;= 60) { time[3] = parseInt(second / 60); second %= 60; } //秒 if (second &gt; 0) { time[4] = second; } currentTimeHtml = '已经运行了' + ' ' + time[0] + ' 年 ' + time[1] + ' 天 ' + time[2] + ' 时 ' + time[3] + ' 分 ' + time[4] + ' 秒'; //xxxxxx可随意定义，中英文都可，例如\"一川的奇思怪想屋运行了\" document.getElementById(\"running-time\").innerHTML = currentTimeHtml; }, 1000);"},{"title":"categories","date":"2025-05-02T12:17:43.000Z","updated":"2025-05-02T12:18:17.417Z","comments":true,"path":"categories/index.html","permalink":"https://ylfei.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2025-05-02T08:02:30.508Z","updated":"2025-05-02T08:02:30.508Z","comments":true,"path":"styles/fish-base.js","permalink":"https://ylfei.github.io/styles/fish-base.js","excerpt":"","text":"var RENDERER = { POINT_INTERVAL : 5, FISH_COUNT : 3, MAX_INTERVAL_COUNT : 50, INIT_HEIGHT_RATE : 0.5, THRESHOLD : 50, init : function(){ this.setParameters(); this.reconstructMethods(); this.setup(); this.bindEvent(); this.render(); }, setParameters : function(){ this.$window = $(window); this.$container = $('#jsi-flying-fish-container'); this.$canvas = $(''); this.context = this.$canvas.appendTo(this.$container).get(0).getContext('2d'); this.points = []; this.fishes = []; this.watchIds = []; }, createSurfacePoints : function(){ var count = Math.round(this.width / this.POINT_INTERVAL); this.pointInterval = this.width / (count - 1); this.points.push(new SURFACE_POINT(this, 0)); for(var i = 1; i &lt; count; i++){ var point = new SURFACE_POINT(this, i * this.pointInterval), previous = this.points[i - 1]; point.setPreviousPoint(previous); previous.setNextPoint(point); this.points.push(point); } }, reconstructMethods : function(){ this.watchWindowSize = this.watchWindowSize.bind(this); this.jdugeToStopResize = this.jdugeToStopResize.bind(this); this.startEpicenter = this.startEpicenter.bind(this); this.moveEpicenter = this.moveEpicenter.bind(this); this.reverseVertical = this.reverseVertical.bind(this); this.render = this.render.bind(this); }, setup : function(){ this.points.length = 0; this.fishes.length = 0; this.watchIds.length = 0; this.intervalCount = this.MAX_INTERVAL_COUNT; this.width = this.$container.width(); this.height = this.$container.height(); this.fishCount = this.FISH_COUNT * this.width / 500 * this.height / 500; this.$canvas.attr({width : this.width, height : this.height}); this.reverse = false; this.fishes.push(new FISH(this)); this.createSurfacePoints(); }, watchWindowSize : function(){ this.clearTimer(); this.tmpWidth = this.$window.width(); this.tmpHeight = this.$window.height(); this.watchIds.push(setTimeout(this.jdugeToStopResize, this.WATCH_INTERVAL)); }, clearTimer : function(){ while(this.watchIds.length &gt; 0){ clearTimeout(this.watchIds.pop()); } }, jdugeToStopResize : function(){ var width = this.$window.width(), height = this.$window.height(), stopped = (width == this.tmpWidth &amp;&amp; height == this.tmpHeight); this.tmpWidth = width; this.tmpHeight = height; if(stopped){ this.setup(); } }, bindEvent : function(){ this.$window.on('resize', this.watchWindowSize); this.$container.on('mouseenter', this.startEpicenter); this.$container.on('mousemove', this.moveEpicenter); this.$container.on('click', this.reverseVertical); }, getAxis : function(event){ var offset = this.$container.offset(); return { x : event.clientX - offset.left + this.$window.scrollLeft(), y : event.clientY - offset.top + this.$window.scrollTop() }; }, startEpicenter : function(event){ this.axis = this.getAxis(event); }, moveEpicenter : function(event){ var axis = this.getAxis(event); if(!this.axis){ this.axis = axis; } this.generateEpicenter(axis.x, axis.y, axis.y - this.axis.y); this.axis = axis; }, generateEpicenter : function(x, y, velocity){ if(y &lt; this.height / 2 - this.THRESHOLD || y &gt; this.height / 2 + this.THRESHOLD){ return; } var index = Math.round(x / this.pointInterval); if(index &lt; 0 || index &gt;= this.points.length){ return; } this.points[index].interfere(y, velocity); }, reverseVertical : function(){ this.reverse = !this.reverse; for(var i = 0, count = this.fishes.length; i &lt; count; i++){ this.fishes[i].reverseVertical(); } }, controlStatus : function(){ for(var i = 0, count = this.points.length; i &lt; count; i++){ this.points[i].updateSelf(); } for(var i = 0, count = this.points.length; i &lt; count; i++){ this.points[i].updateNeighbors(); } if(this.fishes.length &lt; this.fishCount){ if(--this.intervalCount == 0){ this.intervalCount = this.MAX_INTERVAL_COUNT; this.fishes.push(new FISH(this)); } } }, render : function(){ requestAnimationFrame(this.render); this.controlStatus(); this.context.clearRect(0, 0, this.width, this.height); this.context.fillStyle = 'hsl(0, 0%, 95%)'; for(var i = 0, count = this.fishes.length; i &lt; count; i++){ this.fishes[i].render(this.context); } this.context.save(); this.context.globalCompositeOperation = 'xor'; this.context.beginPath(); this.context.moveTo(0, this.reverse ? 0 : this.height); for(var i = 0, count = this.points.length; i &lt; count; i++){ this.points[i].render(this.context); } this.context.lineTo(this.width, this.reverse ? 0 : this.height); this.context.closePath(); this.context.fill(); this.context.restore(); } }; var SURFACE_POINT = function(renderer, x){ this.renderer = renderer; this.x = x; this.init(); }; SURFACE_POINT.prototype = { SPRING_CONSTANT : 0.03, SPRING_FRICTION : 0.9, WAVE_SPREAD : 0.3, ACCELARATION_RATE : 0.01, init : function(){ this.initHeight = this.renderer.height * this.renderer.INIT_HEIGHT_RATE; this.height = this.initHeight; this.fy = 0; this.force = {previous : 0, next : 0}; }, setPreviousPoint : function(previous){ this.previous = previous; }, setNextPoint : function(next){ this.next = next; }, interfere : function(y, velocity){ this.fy = this.renderer.height * this.ACCELARATION_RATE * ((this.renderer.height - this.height - y) &gt;= 0 ? -1 : 1) * Math.abs(velocity); }, updateSelf : function(){ this.fy += this.SPRING_CONSTANT * (this.initHeight - this.height); this.fy *= this.SPRING_FRICTION; this.height += this.fy; }, updateNeighbors : function(){ if(this.previous){ this.force.previous = this.WAVE_SPREAD * (this.height - this.previous.height); } if(this.next){ this.force.next = this.WAVE_SPREAD * (this.height - this.next.height); } }, render : function(context){ if(this.previous){ this.previous.height += this.force.previous; this.previous.fy += this.force.previous; } if(this.next){ this.next.height += this.force.next; this.next.fy += this.force.next; } context.lineTo(this.x, this.renderer.height - this.height); } }; var FISH = function(renderer){ this.renderer = renderer; this.init(); }; FISH.prototype = { GRAVITY : 0.4, init : function(){ this.direction = Math.random() &lt; 0.5; this.x = this.direction ? (this.renderer.width + this.renderer.THRESHOLD) : -this.renderer.THRESHOLD; this.previousY = this.y; this.vx = this.getRandomValue(4, 10) * (this.direction ? -1 : 1); if(this.renderer.reverse){ this.y = this.getRandomValue(this.renderer.height * 1 / 10, this.renderer.height * 4 / 10); this.vy = this.getRandomValue(2, 5); this.ay = this.getRandomValue(0.05, 0.2); }else{ this.y = this.getRandomValue(this.renderer.height * 6 / 10, this.renderer.height * 9 / 10); this.vy = this.getRandomValue(-5, -2); this.ay = this.getRandomValue(-0.2, -0.05); } this.isOut = false; this.theta = 0; this.phi = 0; }, getRandomValue : function(min, max){ return min + (max - min) * Math.random(); }, reverseVertical : function(){ this.isOut = !this.isOut; this.ay *= -1; }, controlStatus : function(context){ this.previousY = this.y; this.x += this.vx; this.y += this.vy; this.vy += this.ay; if(this.renderer.reverse){ if(this.y &gt; this.renderer.height * this.renderer.INIT_HEIGHT_RATE){ this.vy -= this.GRAVITY; this.isOut = true; }else{ if(this.isOut){ this.ay = this.getRandomValue(0.05, 0.2); } this.isOut = false; } }else{ if(this.y &lt; this.renderer.height * this.renderer.INIT_HEIGHT_RATE){ this.vy += this.GRAVITY; this.isOut = true; }else{ if(this.isOut){ this.ay = this.getRandomValue(-0.2, -0.05); } this.isOut = false; } } if(!this.isOut){ this.theta += Math.PI / 20; this.theta %= Math.PI * 2; this.phi += Math.PI / 30; this.phi %= Math.PI * 2; } this.renderer.generateEpicenter(this.x + (this.direction ? -1 : 1) * this.renderer.THRESHOLD, this.y, this.y - this.previousY); if(this.vx &gt; 0 &amp;&amp; this.x &gt; this.renderer.width + this.renderer.THRESHOLD || this.vx &lt; 0 &amp;&amp; this.x &lt; -this.renderer.THRESHOLD){ this.init(); } }, render : function(context){ context.save(); context.translate(this.x, this.y); context.rotate(Math.PI + Math.atan2(this.vy, this.vx)); context.scale(1, this.direction ? 1 : -1); context.beginPath(); context.moveTo(-30, 0); context.bezierCurveTo(-20, 15, 15, 10, 40, 0); context.bezierCurveTo(15, -10, -20, -15, -30, 0); context.fill(); context.save(); context.translate(40, 0); context.scale(0.9 + 0.2 * Math.sin(this.theta), 1); context.beginPath(); context.moveTo(0, 0); context.quadraticCurveTo(5, 10, 20, 8); context.quadraticCurveTo(12, 5, 10, 0); context.quadraticCurveTo(12, -5, 20, -8); context.quadraticCurveTo(5, -10, 0, 0); context.fill(); context.restore(); context.save(); context.translate(-3, 0); context.rotate((Math.PI / 3 + Math.PI / 10 * Math.sin(this.phi)) * (this.renderer.reverse ? -1 : 1)); context.beginPath(); if(this.renderer.reverse){ context.moveTo(5, 0); context.bezierCurveTo(10, 10, 10, 30, 0, 40); context.bezierCurveTo(-12, 25, -8, 10, 0, 0); }else{ context.moveTo(-5, 0); context.bezierCurveTo(-10, -10, -10, -30, 0, -40); context.bezierCurveTo(12, -25, 8, -10, 0, 0); } context.closePath(); context.fill(); context.restore(); context.restore(); this.controlStatus(context); } }; $(function(){ RENDERER.init(); });"},{"title":"","date":"2025-05-02T08:03:01.637Z","updated":"2025-05-02T08:03:01.637Z","comments":true,"path":"styles/fish.js","permalink":"https://ylfei.github.io/styles/fish.js","excerpt":"","text":"fish(); function fish() { return ( $(\"#footer-wrap\").css({ position: \"absolute\", \"text-align\": \"center\", top: 0, right: 0, left: 0, bottom: 0, }), $(\"footer\").append( '' ), $(\"body\").append( '' ), this ); }"},{"title":"","date":"2025-05-02T12:57:31.683Z","updated":"2025-05-02T12:57:31.683Z","comments":true,"path":"styles/main.css","permalink":"https://ylfei.github.io/styles/main.css","excerpt":"","text":"/* 鱼塘固定宽度 */ canvas:not(#ribbon-canvas), #web_bg { margin-bottom: -0.5rem; display: block; width: 100%; height: 160px } /* 鱼塘渐变色 */ body{ overflow-x: hidden; } #footer { height:160px; background: linear-gradient( 135deg, rgba(23, 23, 116, 0.2), rgba(28, 181, 224, 0.2) ); } #footer #footer-wrap, #footer-wrap a { color: #000; } #footer #footer-wrap { z-index: 1; } #footer .container { line-height: 0; position: relative; height: 100%; width: 100vw; } /* 侧边栏个人信息卡片动态渐变色 */ #aside-content&gt;.card-widget.card-info{ background: linear-gradient(-45deg, rgba(255, 225, 245, 0.6), rgba(255, 225, 225, 0.9), rgba(225, 255, 251, 0.9), rgba(255, 225, 255, 0.6)); } [data-theme=dark] #aside-content&gt;.card-widget.card-info { background: linear-gradient(-45deg, rgb(225, 238, 255), rgba(225, 255, 253, 0.9), rgba(225, 243, 255, 0.9), rgba(255, 225, 253, 0.6)); } /* 侧边栏公告栏卡片渐变色 */ #aside-content&gt;.card-widget.card-announcement{ background: linear-gradient(-45deg, rgba(255, 225, 245, 0.6), rgba(255, 225, 225, 0.9), rgba(225, 255, 251, 0.9), rgba(255, 225, 255, 0.6)); } [data-theme=dark] #aside-content&gt;.card-widget.card-announcement{ background: linear-gradient(-45deg, rgba(255, 225, 245, 0.6), rgba(255, 225, 225, 0.9), rgba(225, 255, 251, 0.9), rgba(255, 225, 255, 0.6)); } /* 侧边栏目录最新文章卡片渐变色 */ #aside-content&gt;.sticky_layout&gt;.card-widget{ background: linear-gradient(-45deg, rgba(255, 225, 245, 0.6), rgba(255, 225, 225, 0.9), rgba(225, 255, 251, 0.9), rgba(255, 225, 255, 0.6)); } [data-theme=dark] #aside-content&gt;.sticky_layout&gt;.card-widget{ background: linear-gradient(-45deg, rgba(255, 225, 245, 0.6), rgba(255, 225, 225, 0.9), rgba(225, 255, 251, 0.9), rgba(255, 225, 255, 0.6)); } /* 个人信息Follow me按钮 */ #aside-content&gt;.card-widget.card-info&gt;#card-info-btn { background-color: #3eb8be; border-radius: 8px; } /*文章页面*/ /* .layout&gt;#post { background: linear-gradient(-45deg, rgba(225, 255, 252, 0.8), rgba(255, 225, 229, 0.9), rgba(225, 255, 225, 0.9), rgba(253, 255, 225, 0.8)); } [data-theme=dark] .layout&gt;#post { background: linear-gradient(-45deg, rgba(24,40,72,.2), rgba(35,37,58,.9), rgba(35,37,58,.9), rgba(24,40,72,.2)); } */ /*主页文章预览页面*/ #recent-posts&gt;.recent-post-item{ background: linear-gradient(-45deg, rgba(225, 255, 252, 0.8), rgba(255, 225, 229, 0.9), rgba(225, 255, 225, 0.9), rgba(253, 255, 225, 0.8)); } [data-theme=dark] #recent-posts&gt;.recent-post-item{ background: linear-gradient(-45deg, rgba(24,40,72,.2), rgba(35,37,58,.9), rgba(35,37,58,.9), rgba(24,40,72,.2)); } /*分类页面*/ .layout&gt;#page { background: linear-gradient(-45deg, rgba(225,235,255,.8), rgba(225,235,255,.9), rgba(225,235,255,.9), rgba(225,235,255,.8)); } [data-theme=dark] .layout&gt;#page { background: linear-gradient(-45deg, rgba(24,40,72,.2), rgba(35,37,58,.9), rgba(35,37,58,.9), rgba(24,40,72,.2)); } /*时间轴页面*/ .layout&gt;#archive { background: linear-gradient(-45deg, rgba(225,235,255,.8), rgba(225,235,255,.9), rgba(225,235,255,.9), rgba(225,235,255,.8)); } [data-theme=dark] .layout&gt;#archive { background: linear-gradient(-45deg, rgba(24,40,72,.2), rgba(35,37,58,.9), rgba(35,37,58,.9), rgba(24,40,72,.2)); }"},{"title":"标签","date":"2023-04-30T06:57:32.000Z","updated":"2023-04-30T06:59:41.488Z","comments":false,"path":"tags/index.html","permalink":"https://ylfei.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"今日诗词","slug":"mages","date":"2025-04-17T01:29:16.000Z","updated":"2025-04-17T02:40:35.137Z","comments":true,"path":"posts/7850.html","link":"","permalink":"https://ylfei.github.io/posts/7850.html","excerpt":"","text":"念两句诗 挑选中... jinrishici.load(function(result) { poem.innerHTML = result.data.content info.innerHTML = '【' + result.data.origin.dynasty + '】' + result.data.origin.author + '《' + result.data.origin.title + '》' document.getElementById(\"poem\").value(poem); document.getElementById(\"info\").value(info); }); 添加每日一言获取中...","categories":[{"name":"hexo","slug":"hexo","permalink":"https://ylfei.github.io/categories/hexo/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ylfei.github.io/tags/hexo/"},{"name":"诗词","slug":"诗词","permalink":"https://ylfei.github.io/tags/%E8%AF%97%E8%AF%8D/"}],"keywords":[{"name":"hexo","slug":"hexo","permalink":"https://ylfei.github.io/categories/hexo/"}]},{"title":"便携小空调设置","slug":"air","date":"2025-04-05T02:46:12.000Z","updated":"2025-05-02T12:46:56.595Z","comments":true,"path":"posts/45943.html","link":"","permalink":"https://ylfei.github.io/posts/45943.html","excerpt":"","text":"部署方案在博客根目录执行命令: 1hexo new page air-conditioner 会生成source/air-conditioner/index.md, 将以下内容替换原内容 12345678910111213141516171819---title: 便携小空调 - 为你的夏日带去清凉!date: 2022-10-20 22:06:17comments: trueaside: falsetop_img: false---&gt; 终于为博客安装上了便携小空调&lt;style&gt;.copyright-box a { border-bottom: none !important; padding: 0 !important;}&lt;/style&gt;&lt;div id=\"air-conditioner-vue\"&gt;&lt;/div&gt;&lt;script defer data-pjax src='https://npm.elemecdn.com/anzhiyu-air-conditioner@1.0.1/index.3f125bc6.js'&gt;&lt;/script&gt; 然后访问https://你的博客域名/air-conditioner就可以得到一个没有风的空调 ❄️ 其他部署方案如果使用的是其他的，部署也一样简单，只需加入以下代码嵌入网站即可 1&lt;iframe height=\"740\" src=\"https://loquacious-bienenstitch-58539b.netlify.app/\"&gt;&lt;/iframe&gt;","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ylfei.github.io/tags/hexo/"},{"name":"html","slug":"html","permalink":"https://ylfei.github.io/tags/html/"},{"name":"js","slug":"js","permalink":"https://ylfei.github.io/tags/js/"}],"keywords":[]},{"title":"butterfly 主题配置","slug":"butterfly主题配置","date":"2025-04-04T08:31:05.000Z","updated":"2025-05-02T12:22:34.687Z","comments":true,"path":"posts/51784.html","link":"","permalink":"https://ylfei.github.io/posts/51784.html","excerpt":"","text":"安装在 Hexo 根目录里 1git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly 应用主题修改 Hexo 根目录下的 ，把主题改为 _config.ymlbutterfly 1theme: butterfly 安装插件如果没有 pug 以及 stylus 的渲染器，下载安装： 1npm install hexo-renderer-pug hexo-renderer-stylus --save 主题配置主题配置文件是themes/butterfly/_config.yml 导航目录设置顶部右上方区域的内容 12345678910# Menu 目录menu: 首页: / || fas fa-home 归档: /archives/ || fas fa-archive 标签: /tags/ || fas fa-tags 分类: /categories/ || fas fa-folder-open 友链: /link/ || fas fa-link 关于: /about/ || fas fa-heart# 格式如下：# [标题]: [路径] || [图标] 这里的目录中，tags、categories、link、about目录默认不存在，需要在Bash窗口中使用命令生成对应页面 1234hexo new page tagshexo new page categorieshexo new page linkhexo new page about 把创建的页面设置为对应的页面类型 代码高度限制可配置代码高度限制，超出的部分会隐藏，并显示展开按钮。 1highlight_height_limit: false # unit: px 注意：单位是px，直接添加数字，如 200实际限制高度为highlight_height_limit + 30 px ，多增加 30px 限制，目的是避免代码高度只超出highlight_height_limit 一点时，出现展开按钮，展开没内容。不适用于隐藏后的代码块（ css 设置 display: none） 页脚自定义文本custom_text是一个用来在页脚自定义文本的选项。通常可以在这里写声明文本等。支持 HTML。 修改主题配置文件_config.butterfly.yml。 页脚如下，若在配置时没有出现github徽章，请参考教程添加Github徽标. 1custom_text: I wish you to become your own sun, no need to rely on who's light.&lt;p&gt;&lt;a target=\"_blank\" href=\"https://hexo.io/\"&gt;&lt;img src=\"https://img.shields.io/badge/Frame-Hexo-blue?style=flat&amp;logo=hexo\" title=\"博客框架为Hexo\"&gt;&lt;/a&gt;&amp;nbsp;&lt;a target=\"_blank\" href=\"https://butterfly.js.org/\"&gt;&lt;img src=\"https://img.shields.io/badge/Theme-Butterfly-6513df?style=flat&amp;logo=bitdefender\" title=\"主题采用butterfly\"&gt;&lt;/a&gt;&amp;nbsp;&lt;a target=\"_blank\" href=\"https://www.jsdelivr.com/\"&gt;&lt;img src=\"https://img.shields.io/badge/CDN-jsDelivr-orange?style=flat&amp;logo=jsDelivr\" title=\"本站使用JsDelivr为静态资源提供CDN加速\"&gt;&lt;/a&gt; &amp;nbsp;&lt;a target=\"_blank\" href=\"https://vercel.com/ \"&gt;&lt;img src=\"https://img.shields.io/badge/Hosted-Vervel-brightgreen?style=flat&amp;logo=Vercel\" title=\"本站采用双线部署，默认线路托管于Vercel\"&gt;&lt;/a&gt;&amp;nbsp;&lt;a target=\"_blank\" href=\"https://vercel.com/ \"&gt;&lt;img src=\"https://img.shields.io/badge/Hosted-Coding-0cedbe?style=flat&amp;logo=Codio\" title=\"本站采用双线部署，联通线路托管于Coding\"&gt;&lt;/a&gt;&amp;nbsp;&lt;a target=\"_blank\" href=\"https://github.com/\"&gt;&lt;img src=\"https://img.shields.io/badge/Source-Github-d021d6?style=flat&amp;logo=GitHub\" title=\"本站项目由Gtihub托管\"&gt;&lt;/a&gt;&amp;nbsp;&lt;a target=\"_blank\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\"&gt;&lt;img src=\"https://img.shields.io/badge/Copyright-BY--NC--SA%204.0-d42328?style=flat&amp;logo=Claris\" title=\"本站采用知识共享署名-非商业性使用-相同方式共享4.0国际许可协议进行许可\"&gt;&lt;/a&gt;&lt;/p&gt; 对于部分人需要写 ICP 的，也可以写在custom_text里。 1custom_text: &lt;a href=\"icp链接\"&gt;&lt;img class=\"icp-icon\" src=\"icp图片\"&gt;&lt;span&gt;备案号：xxxxxx&lt;/span&gt;&lt;/a&gt; 打字效果修改主题配置文件_config.butterfly.yml 1234567# Typewriter Effect (打字效果)# https://github.com/disjukr/activate-power-modeactivate_power_mode: enable: false colorful: true # open particle animation (冒光特效) shake: true # open shake (抖動特效) mobile: false 页面加载动画preloader当进入网页时，因为加载速度的问题，可能会导致top_img图片出现断层显示，或者网页加载不全而出现等待时间，开启preloader后，会显示加载动画，等页面加载完，加载动画会消失。 12# 加载动画 Loading Animationpreloader: true 启用本地搜索12345search: # Choose: algolia_search / local_search / docsearch # leave it empty if you don't need search use: local_search placeholder: 文章 meta 显示post_meta 这个属性用于显示文章的相关信息的。 修改主题配置文件_config.butterfly.yml. 12345678910111213post_meta: page: date_type: both # created or updated or both 主页文章日期是创建日或者更新日或都显示 date_format: relative # date/relative 显示日期还是相对日期 categories: true # true or false 主页是否显示分类 tags: true # true or false 主页是否显示标签 label: true # true or false 显示描述性文字 post: date_type: both # created or updated or both 文章页日期是创建日或者更新日或都显示 date_format: relative # date/relative 显示日期还是相对日期 categories: true # true or false 文章页是否显示分类 tags: true # true or false 文章页是否显示标签 label: true # true or false 显示描述性文字 文章版权和协议许可修改主题配置文件_config.butterfly.yml。 123456post_copyright: enable: true decode: false author_href: license: CC BY-NC-SA 4.0 license_url: https://creativecommons.org/licenses/by-nc-sa/4.0/ 由于 Hexo 4.1 开始，默认对网址进行解码，以至于如果是中文网址，会被解码，可设置 decode: true 来显示中文网址。 如果有文章（例如：转载文章）不需要显示版权，可以在文章页 Front-matter中单独设置。 1copyright: false 文章打赏修改主题配置文件_config.butterfly.yml。 123456789reward: enable: true QR_code: - img: /img/wechat.jpg link: text: wechat - img: /img/alipay.jpg link: text: alipay 阅读模式阅读模式下会去掉除文章外的内容，避免干扰阅读。只会出现在文章页面，右下角会有阅读模式按钮。 修改主题配置文件_config.butterfly.yml。 1readmode: true 池塘养鱼在主题配置文件 _config.butterfly.yml 加入以下代码： 123456inject: head: bottom: - &lt;script src=\"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js\"&gt;&lt;/script&gt; - &lt;script src=\"https://cdn.jsdelivr.net/gh/xiabo2/CDN@latest/fishes.js\"&gt;&lt;/script&gt; 有时候会遇到cdn解析失败，导致鱼塘加载不出来，可以js文件格式本地引入 在 source 目录下新建一个 styles 文件夹，用于存放相关文件添加如下两个文件文件一：fish-base.jsvar RENDERER = { POINT_INTERVAL : 5, FISH_COUNT : 3, MAX_INTERVAL_COUNT : 50, INIT_HEIGHT_RATE : 0.5, THRESHOLD : 50, init : function(){ this.setParameters(); this.reconstructMethods(); this.setup(); this.bindEvent(); this.render(); }, setParameters : function(){ this.$window = $(window); this.$container = $('#jsi-flying-fish-container'); this.$canvas = $('&lt;canvas /&gt;'); this.context = this.$canvas.appendTo(this.$container).get(0).getContext('2d'); this.points = []; this.fishes = []; this.watchIds = []; }, createSurfacePoints : function(){ var count = Math.round(this.width / this.POINT_INTERVAL); this.pointInterval = this.width / (count - 1); this.points.push(new SURFACE_POINT(this, 0)); for(var i = 1; i &lt; count; i++){ var point = new SURFACE_POINT(this, i * this.pointInterval), previous = this.points[i - 1]; point.setPreviousPoint(previous); previous.setNextPoint(point); this.points.push(point); } }, reconstructMethods : function(){ this.watchWindowSize = this.watchWindowSize.bind(this); this.jdugeToStopResize = this.jdugeToStopResize.bind(this); this.startEpicenter = this.startEpicenter.bind(this); this.moveEpicenter = this.moveEpicenter.bind(this); this.reverseVertical = this.reverseVertical.bind(this); this.render = this.render.bind(this); }, setup : function(){ this.points.length = 0; this.fishes.length = 0; this.watchIds.length = 0; this.intervalCount = this.MAX_INTERVAL_COUNT; this.width = this.$container.width(); this.height = this.$container.height(); this.fishCount = this.FISH_COUNT * this.width / 500 * this.height / 500; this.$canvas.attr({width : this.width, height : this.height}); this.reverse = false; this.fishes.push(new FISH(this)); this.createSurfacePoints(); }, watchWindowSize : function(){ this.clearTimer(); this.tmpWidth = this.$window.width(); this.tmpHeight = this.$window.height(); this.watchIds.push(setTimeout(this.jdugeToStopResize, this.WATCH_INTERVAL)); }, clearTimer : function(){ while(this.watchIds.length &gt; 0){ clearTimeout(this.watchIds.pop()); } }, jdugeToStopResize : function(){ var width = this.$window.width(), height = this.$window.height(), stopped = (width == this.tmpWidth &amp;&amp; height == this.tmpHeight); this.tmpWidth = width; this.tmpHeight = height; if(stopped){ this.setup(); } }, bindEvent : function(){ this.$window.on('resize', this.watchWindowSize); this.$container.on('mouseenter', this.startEpicenter); this.$container.on('mousemove', this.moveEpicenter); this.$container.on('click', this.reverseVertical); }, getAxis : function(event){ var offset = this.$container.offset(); return { x : event.clientX - offset.left + this.$window.scrollLeft(), y : event.clientY - offset.top + this.$window.scrollTop() }; }, startEpicenter : function(event){ this.axis = this.getAxis(event); }, moveEpicenter : function(event){ var axis = this.getAxis(event); if(!this.axis){ this.axis = axis; } this.generateEpicenter(axis.x, axis.y, axis.y - this.axis.y); this.axis = axis; }, generateEpicenter : function(x, y, velocity){ if(y &lt; this.height / 2 - this.THRESHOLD || y &gt; this.height / 2 + this.THRESHOLD){ return; } var index = Math.round(x / this.pointInterval); if(index &lt; 0 || index &gt;= this.points.length){ return; } this.points[index].interfere(y, velocity); }, reverseVertical : function(){ this.reverse = !this.reverse; for(var i = 0, count = this.fishes.length; i &lt; count; i++){ this.fishes[i].reverseVertical(); } }, controlStatus : function(){ for(var i = 0, count = this.points.length; i &lt; count; i++){ this.points[i].updateSelf(); } for(var i = 0, count = this.points.length; i &lt; count; i++){ this.points[i].updateNeighbors(); } if(this.fishes.length &lt; this.fishCount){ if(--this.intervalCount == 0){ this.intervalCount = this.MAX_INTERVAL_COUNT; this.fishes.push(new FISH(this)); } } }, render : function(){ requestAnimationFrame(this.render); this.controlStatus(); this.context.clearRect(0, 0, this.width, this.height); this.context.fillStyle = 'hsl(0, 0%, 95%)'; for(var i = 0, count = this.fishes.length; i &lt; count; i++){ this.fishes[i].render(this.context); } this.context.save(); this.context.globalCompositeOperation = 'xor'; this.context.beginPath(); this.context.moveTo(0, this.reverse ? 0 : this.height); for(var i = 0, count = this.points.length; i &lt; count; i++){ this.points[i].render(this.context); } this.context.lineTo(this.width, this.reverse ? 0 : this.height); this.context.closePath(); this.context.fill(); this.context.restore(); }};var SURFACE_POINT = function(renderer, x){ this.renderer = renderer; this.x = x; this.init();};SURFACE_POINT.prototype = { SPRING_CONSTANT : 0.03, SPRING_FRICTION : 0.9, WAVE_SPREAD : 0.3, ACCELARATION_RATE : 0.01, init : function(){ this.initHeight = this.renderer.height * this.renderer.INIT_HEIGHT_RATE; this.height = this.initHeight; this.fy = 0; this.force = {previous : 0, next : 0}; }, setPreviousPoint : function(previous){ this.previous = previous; }, setNextPoint : function(next){ this.next = next; }, interfere : function(y, velocity){ this.fy = this.renderer.height * this.ACCELARATION_RATE * ((this.renderer.height - this.height - y) &gt;= 0 ? -1 : 1) * Math.abs(velocity); }, updateSelf : function(){ this.fy += this.SPRING_CONSTANT * (this.initHeight - this.height); this.fy *= this.SPRING_FRICTION; this.height += this.fy; }, updateNeighbors : function(){ if(this.previous){ this.force.previous = this.WAVE_SPREAD * (this.height - this.previous.height); } if(this.next){ this.force.next = this.WAVE_SPREAD * (this.height - this.next.height); } }, render : function(context){ if(this.previous){ this.previous.height += this.force.previous; this.previous.fy += this.force.previous; } if(this.next){ this.next.height += this.force.next; this.next.fy += this.force.next; } context.lineTo(this.x, this.renderer.height - this.height); }};var FISH = function(renderer){ this.renderer = renderer; this.init();};FISH.prototype = { GRAVITY : 0.4, init : function(){ this.direction = Math.random() &lt; 0.5; this.x = this.direction ? (this.renderer.width + this.renderer.THRESHOLD) : -this.renderer.THRESHOLD; this.previousY = this.y; this.vx = this.getRandomValue(4, 10) * (this.direction ? -1 : 1); if(this.renderer.reverse){ this.y = this.getRandomValue(this.renderer.height * 1 / 10, this.renderer.height * 4 / 10); this.vy = this.getRandomValue(2, 5); this.ay = this.getRandomValue(0.05, 0.2); }else{ this.y = this.getRandomValue(this.renderer.height * 6 / 10, this.renderer.height * 9 / 10); this.vy = this.getRandomValue(-5, -2); this.ay = this.getRandomValue(-0.2, -0.05); } this.isOut = false; this.theta = 0; this.phi = 0; }, getRandomValue : function(min, max){ return min + (max - min) * Math.random(); }, reverseVertical : function(){ this.isOut = !this.isOut; this.ay *= -1; }, controlStatus : function(context){ this.previousY = this.y; this.x += this.vx; this.y += this.vy; this.vy += this.ay; if(this.renderer.reverse){ if(this.y &gt; this.renderer.height * this.renderer.INIT_HEIGHT_RATE){ this.vy -= this.GRAVITY; this.isOut = true; }else{ if(this.isOut){ this.ay = this.getRandomValue(0.05, 0.2); } this.isOut = false; } }else{ if(this.y &lt; this.renderer.height * this.renderer.INIT_HEIGHT_RATE){ this.vy += this.GRAVITY; this.isOut = true; }else{ if(this.isOut){ this.ay = this.getRandomValue(-0.2, -0.05); } this.isOut = false; } } if(!this.isOut){ this.theta += Math.PI / 20; this.theta %= Math.PI * 2; this.phi += Math.PI / 30; this.phi %= Math.PI * 2; } this.renderer.generateEpicenter(this.x + (this.direction ? -1 : 1) * this.renderer.THRESHOLD, this.y, this.y - this.previousY); if(this.vx &gt; 0 &amp;&amp; this.x &gt; this.renderer.width + this.renderer.THRESHOLD || this.vx &lt; 0 &amp;&amp; this.x &lt; -this.renderer.THRESHOLD){ this.init(); } }, render : function(context){ context.save(); context.translate(this.x, this.y); context.rotate(Math.PI + Math.atan2(this.vy, this.vx)); context.scale(1, this.direction ? 1 : -1); context.beginPath(); context.moveTo(-30, 0); context.bezierCurveTo(-20, 15, 15, 10, 40, 0); context.bezierCurveTo(15, -10, -20, -15, -30, 0); context.fill(); context.save(); context.translate(40, 0); context.scale(0.9 + 0.2 * Math.sin(this.theta), 1); context.beginPath(); context.moveTo(0, 0); context.quadraticCurveTo(5, 10, 20, 8); context.quadraticCurveTo(12, 5, 10, 0); context.quadraticCurveTo(12, -5, 20, -8); context.quadraticCurveTo(5, -10, 0, 0); context.fill(); context.restore(); context.save(); context.translate(-3, 0); context.rotate((Math.PI / 3 + Math.PI / 10 * Math.sin(this.phi)) * (this.renderer.reverse ? -1 : 1)); context.beginPath(); if(this.renderer.reverse){ context.moveTo(5, 0); context.bezierCurveTo(10, 10, 10, 30, 0, 40); context.bezierCurveTo(-12, 25, -8, 10, 0, 0); }else{ context.moveTo(-5, 0); context.bezierCurveTo(-10, -10, -10, -30, 0, -40); context.bezierCurveTo(12, -25, 8, -10, 0, 0); } context.closePath(); context.fill(); context.restore(); context.restore(); this.controlStatus(context); }};$(function(){ RENDERER.init();}); 文件二：fish.js 1234567891011121314151617181920fish();function fish() { return ( $(\"#footer-wrap\").css({ position: \"absolute\", \"text-align\": \"center\", top: 0, right: 0, left: 0, bottom: 0, }), $(\"footer\").append( '&lt;div class=\"container\" id=\"jsi-flying-fish-container\"&gt;&lt;/div&gt;' ), $(\"body\").append( '&lt;script src=\"/styles/fish-base.js\"&gt;&lt;/script&gt;' ), this ); } 在主题配置文件下引入这两个文件代码如下： 1- &lt;script src=\"/styles/fish.js\"&gt;&lt;/script&gt; 一样也得引入 jquery： 1- &lt;script src=\"https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js\"&gt;&lt;/script&gt; 渐变色设置在styles目录下新建一个 main.css 文件，键入以下代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133/* 鱼塘固定宽度 */canvas:not(#ribbon-canvas), #web_bg { margin-bottom: -0.5rem; display: block; width: 100%; height: 160px} /* 鱼塘渐变色 */body{ overflow-x: hidden;}#footer { height:160px; background: linear-gradient( 135deg, rgba(23, 23, 116, 0.2), rgba(28, 181, 224, 0.2) );}#footer #footer-wrap,#footer-wrap a { color: #000;}#footer #footer-wrap { z-index: 1;} #footer .container { line-height: 0; position: relative; height: 100%; width: 100vw;} /* 侧边栏个人信息卡片动态渐变色 */#aside-content&gt;.card-widget.card-info{ background: linear-gradient(-45deg, rgba(255, 225, 245, 0.6), rgba(255, 225, 225, 0.9), rgba(225, 255, 251, 0.9), rgba(255, 225, 255, 0.6));}[data-theme=dark] #aside-content&gt;.card-widget.card-info { background: linear-gradient(-45deg, rgb(225, 238, 255), rgba(225, 255, 253, 0.9), rgba(225, 243, 255, 0.9), rgba(255, 225, 253, 0.6));}/* 侧边栏公告栏卡片渐变色 */#aside-content&gt;.card-widget.card-announcement{ background: linear-gradient(-45deg, rgba(255, 225, 245, 0.6), rgba(255, 225, 225, 0.9), rgba(225, 255, 251, 0.9), rgba(255, 225, 255, 0.6));}[data-theme=dark] #aside-content&gt;.card-widget.card-announcement{ background: linear-gradient(-45deg, rgba(255, 225, 245, 0.6), rgba(255, 225, 225, 0.9), rgba(225, 255, 251, 0.9), rgba(255, 225, 255, 0.6));}/* 侧边栏目录最新文章卡片渐变色 */#aside-content&gt;.sticky_layout&gt;.card-widget{ background: linear-gradient(-45deg, rgba(255, 225, 245, 0.6), rgba(255, 225, 225, 0.9), rgba(225, 255, 251, 0.9), rgba(255, 225, 255, 0.6));}[data-theme=dark] #aside-content&gt;.sticky_layout&gt;.card-widget{ background: linear-gradient(-45deg, rgba(255, 225, 245, 0.6), rgba(255, 225, 225, 0.9), rgba(225, 255, 251, 0.9), rgba(255, 225, 255, 0.6));}/* 个人信息Follow me按钮 */#aside-content&gt;.card-widget.card-info&gt;#card-info-btn { background-color: #3eb8be; border-radius: 8px;}/*文章页面*//* .layout&gt;#post { background: linear-gradient(-45deg, rgba(225, 255, 252, 0.8), rgba(255, 225, 229, 0.9), rgba(225, 255, 225, 0.9), rgba(253, 255, 225, 0.8));}[data-theme=dark] .layout&gt;#post { background: linear-gradient(-45deg, rgba(24,40,72,.2), rgba(35,37,58,.9), rgba(35,37,58,.9), rgba(24,40,72,.2));} *//*主页文章预览页面*/#recent-posts&gt;.recent-post-item{ background: linear-gradient(-45deg, rgba(225, 255, 252, 0.8), rgba(255, 225, 229, 0.9), rgba(225, 255, 225, 0.9), rgba(253, 255, 225, 0.8));}[data-theme=dark] #recent-posts&gt;.recent-post-item{ background: linear-gradient(-45deg, rgba(24,40,72,.2), rgba(35,37,58,.9), rgba(35,37,58,.9), rgba(24,40,72,.2));} /*分类页面*/.layout&gt;#page { background: linear-gradient(-45deg, rgba(225,235,255,.8), rgba(225,235,255,.9), rgba(225,235,255,.9), rgba(225,235,255,.8));}[data-theme=dark] .layout&gt;#page { background: linear-gradient(-45deg, rgba(24,40,72,.2), rgba(35,37,58,.9), rgba(35,37,58,.9), rgba(24,40,72,.2));} /*时间轴页面*/.layout&gt;#archive { background: linear-gradient(-45deg, rgba(225,235,255,.8), rgba(225,235,255,.9), rgba(225,235,255,.9), rgba(225,235,255,.8));}[data-theme=dark] .layout&gt;#archive { background: linear-gradient(-45deg, rgba(24,40,72,.2), rgba(35,37,58,.9), rgba(35,37,58,.9), rgba(24,40,72,.2));} 这里只修改了鱼塘和部分个人主页的渐变色，也可以自己调成你喜欢的渐变色 同样，也需要在主题配置文件中引入这个css文件： 1- &lt;link rel=\"stylesheet\" href=\"/styles/main.css\"&gt;","categories":[{"name":"主题","slug":"主题","permalink":"https://ylfei.github.io/categories/%E4%B8%BB%E9%A2%98/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ylfei.github.io/tags/hexo/"},{"name":"主题","slug":"主题","permalink":"https://ylfei.github.io/tags/%E4%B8%BB%E9%A2%98/"}],"keywords":[{"name":"主题","slug":"主题","permalink":"https://ylfei.github.io/categories/%E4%B8%BB%E9%A2%98/"}]},{"title":"批处理命令","slug":"批处理命令","date":"2024-01-09T05:16:15.000Z","updated":"2024-01-09T06:48:50.774Z","comments":true,"path":"posts/44656.html","link":"","permalink":"https://ylfei.github.io/posts/44656.html","excerpt":"","text":"批处理命令 映射磁盘驱动器 net use y: \\\\10.80.155.152\\F /user:hp “y”指定的驱动器号; /user:”username” 使用文件资源管理器打开FTP服务器登录窗口 12@echo offexplorer ftp://10.80.155.152 使用浏览器打开对应网址 12@echo offstart www.baidu.com 按任意键继续 pause 按任意键继续 启动磁盘里的可执行程序 12345/@echo offe:cd\\cd examClient-win32–x64examClient.exe 打开共享文件夹 12345@echo offrem 建立链接rem 打开共享文件夹explorer \\\\10.80.7.1\\exit 运行后删除自身文件 使用 del %0 1234@echo offecho 按任意键后我将删除自身pausedel %0 万能删除文件 123@echo offDEL /F /A /Q \\\\?\\%1RD /S /Q \\\\?\\%1 批处理删除文件夹下所有文件和文件夹 1、rd命令rd /s /Q c:\\temp会将temp文件夹也删除 2、rd命令+md命令rd /s /Q c:\\tempmd c:\\Temp删除后再重建 3、del命令del /s /Q c:\\temp只能删除文件，而不能删除子文件夹 4、del命令+rd命令，先刪除文件，再进入temp文件夹删除目录del /s /Q c:\\tempcd C:\\temprd /s /q c:\\temp","categories":[],"tags":[{"name":"bat","slug":"bat","permalink":"https://ylfei.github.io/tags/bat/"},{"name":"批处理","slug":"批处理","permalink":"https://ylfei.github.io/tags/%E6%89%B9%E5%A4%84%E7%90%86/"},{"name":"cmd","slug":"cmd","permalink":"https://ylfei.github.io/tags/cmd/"}],"keywords":[]},{"title":"软件静默安装参数","slug":"软件静默安装参数","date":"2024-01-09T04:50:10.000Z","updated":"2024-01-09T06:49:07.147Z","comments":true,"path":"posts/10107.html","link":"","permalink":"https://ylfei.github.io/posts/10107.html","excerpt":"","text":"软件静默参数大部分软件的安装都能采取全自动或半自动的方式进行，只需要找到对应的静默参数 Microsoft Windows Installer 如果某个软件是用 Windows Installer 打包的，那你就应该能在文件夹中看到 *.msi 文件。这是最典型的特征，这些文件通常可以使用 /QB 和 /QN 参数进行自动安装。 /qb 会在窗口中显示一个基本的安装进程。 /qn 参数则不会显示任何窗口，直接在后台自动安装。 常用软件12345WinRAR.exe /S7-ZIP.exe /S搜狗输入法.exe /SQQ /SVC++运行库 /SILENT 显示窗口直接安装","categories":[],"tags":[{"name":"windows","slug":"windows","permalink":"https://ylfei.github.io/tags/windows/"}],"keywords":[]},{"title":"禁止ipc默认共享","slug":"禁止ipc默认共享","date":"2024-01-09T04:35:10.000Z","updated":"2024-01-09T06:48:08.040Z","comments":true,"path":"posts/38974.html","link":"","permalink":"https://ylfei.github.io/posts/38974.html","excerpt":"","text":"禁止ipc$默认共享 把ipc$和默认共享都删除了。但重起后还会有。也可以放到一个批处理里面 把这个批处理文件设置开机启动 可以禁止共享 在win10及以上系统中如使用的不是管理员账户 需要在批处理前添加获取管理员身份的权限代码如下： 1234%1 %2ver|find \"5.\"&gt;nul&amp;&amp;goto :Adminmshta vbscript:createobject(\"shell.application\").shellexecute(\"%~s0\",\"goto :Admin\",\"\",\"runas\",1)(window.close)&amp;goto :eof:Admin 删除共享的代码 123456net share ipc$ /delnet share admin$ /delnet share c$ /delnet share d$ /del# …………（有几个删几个）","categories":[],"tags":[{"name":"win10","slug":"win10","permalink":"https://ylfei.github.io/tags/win10/"},{"name":"IPC","slug":"IPC","permalink":"https://ylfei.github.io/tags/IPC/"},{"name":"共享","slug":"共享","permalink":"https://ylfei.github.io/tags/%E5%85%B1%E4%BA%AB/"}],"keywords":[]},{"title":"Win10配置NTP服务器","slug":"Win10配置NTP服务器","date":"2024-01-09T04:16:15.000Z","updated":"2024-01-09T06:48:32.104Z","comments":true,"path":"posts/14899.html","link":"","permalink":"https://ylfei.github.io/posts/14899.html","excerpt":"","text":"NTP服务器配置1.使用组合键WIN + R 启动运行窗口，在打开的窗口中输入regedit，点击确定按钮. 2.在打开的注册表中输入HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\Config，找到并打开Config目录，双击Config目录下的AnnounceFlags。3.把注册表项的值设定为5，点击确定按钮 4.再次输入注册表路径HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer，双击NtpServer下的Enabled文件。5.把Enabled的值设定为1，点击确定按钮。 6.打开命令提示符窗口（以管理员身份运行）。开始-找到windows系统-找到命令提示符-然后鼠标右键点击命令提示符-选择以管理员身份运行。 7.输入net stop w32time停止服务，再输入net start w32time启动服务。8.输入命令w32tm /stripchart /computer:127.0.0.1，有时间回显说明配置成功。 在win10上配置NTP时间同步服务器的方法就介绍完了。（也可以在局域网内的其他计算机上使用ntp服务功能进行ntp校时验证)","categories":[],"tags":[{"name":"NTP","slug":"NTP","permalink":"https://ylfei.github.io/tags/NTP/"},{"name":"win10","slug":"win10","permalink":"https://ylfei.github.io/tags/win10/"},{"name":"服务器","slug":"服务器","permalink":"https://ylfei.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"keywords":[]},{"title":"Github迁移到Gitee","slug":"github迁移到gitee","date":"2023-10-22T05:50:00.000Z","updated":"2023-10-27T13:52:39.284Z","comments":true,"path":"posts/49051.html","link":"","permalink":"https://ylfei.github.io/posts/49051.html","excerpt":"","text":"Git配置在blog文件夹下打开git输入 12git config --global user.email \"注册gitee时使用的邮箱\"git config --global user.name \"gitee的用户名\" 生成git公钥 1ssh-keygen -t rsa -C \"you email@126.com\"提示输入passphrase时可直接回车 可通过查看.ssh/id_rsa.pub 文件内容，获取你的public key 123# 此命令在本地PC上执行cat ~/.ssh/id_rsa.pub# ssh-rsa AAAB3NzaC1yc2EAAAADAQABAAABgqcp2lvm.... 将公钥添加到Gitee首先进入设置页面在安全设置中,选择SSH公钥 ， 添加公钥后点击确定。 在Git Bash中输入 1ssh -T git@gitee.com 出现Hi XXX! You’ve successfully authenticated, but Gitee.com does not provide shell access.则证明成功！ 打开_config.yml进行修改补全如下代码 repo即你的仓库https地址 1234deploy: type: git repo: git@github.com:your_name/your_name.gitee.io.git branch: master 其中your_name需要替换为你的gitee的账号 现在还需要创建一个首页访问地址不带二级目录的pages，如ipvb.gitee.io新建一个仓库，仓库地址为https://gitee.com/cas/cas.git,gitee pages地址为https://cas.gitee.io 这样配置就不存在二级目录的问题 1234567891011# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: https://cas.gitee.io // 这个地址为预览地址，即为gitee page服务地址root: /# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://gitee.com/cas/.git branch: master 现在需要执行以下命令 就可以发布自己的博客了。每次新建完文章之后部署，也是相同命令 123hexo clean # 清除本地缓存hexo g # 重新生成静态页面hexo d # 部署到git","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://ylfei.github.io/tags/Hexo/"},{"name":"Gitee","slug":"Gitee","permalink":"https://ylfei.github.io/tags/Gitee/"}],"keywords":[]},{"title":"使用优盘安装Win10系统","slug":"使用优盘安装Win10系统","date":"2023-04-27T16:00:00.000Z","updated":"2025-05-02T12:42:02.070Z","comments":true,"path":"posts/454.html","link":"","permalink":"https://ylfei.github.io/posts/454.html","excerpt":"","text":"安装系统需要对硬盘进行格式化操作，为了避免重要数据的丢失，请事先把硬盘上的重要数据 进行备份。需要备份的数据包括：个人撰写的文档，电子邮件等资料,重要的图片、音乐或视频 资料,IE的收藏夹内容办公软件生成的各种数据和报表、程序安装文件等 本文通过使用优启通制作U盘启动盘来安装原版win10镜像，优盘安装系统的优点在于 灵活性更强兼容性更好，支持BIOS+MBR和GPT下安装，即使原系统启动不了 也能安装。 前期准备工作 下载系统 https://msdn.itellyou.cn 选择对应的操作系统版本 复制下载链接 使用迅雷下载到电脑上 制作启动U盘 使用优启通制作U盘启动盘 下载地址 https://www.upe.net 操作步骤首先制作一个U盘PE启动盘本文以IT天空出品的“优启通”为 示例（PE及工具不唯一，大家可根据自己需要选择纯净无捆绑的即可） 制作U盘PE启动盘具体步骤如下图示 注 ：如果U盘需要存放 单个大于4G 的文件，建议U盘制作时选择 exFAT 或 NTFS 格式 启动热键选择 制作成功U盘PE启动盘后，插在需要重装系统的电脑上，按下表选择启动热键启动进U盘PE系统。 各品牌主板、笔记本、台式机启动快捷键大全 主板品牌 启动按键 笔记本品牌 启动按键 台式机品牌 启动按键 华硕主板 F8 联想笔记本 F12 联想台式机 F12 技嘉主板 F12 宏基笔记本 F12 惠普台式机 F12 微星主板 F11 华硕笔记本 ESC 宏基台式机 F12 映泰主板 F9 惠普笔记本 F9 戴尔台式机 ESC 梅捷主板 ESC或F12 联想Thinkpad F12 神州台式机 F12 七彩虹主板 ESC或F11 戴尔笔记本 F12 华硕台式机 F8 华擎主板 F11 神州笔记本 F12 方正台式机 F12 斯巴达卡主板 ESC 东芝笔记本 F12 清华同方台式机 F12 昂达主板 F11 三星笔记本 F12 海尔台式机 F12 双敏主板 ESC 索尼笔记本 ESC 明基台式机 F8 翔升主板 F10 IBM笔记本 F12 精英主板 ESC或F11 富士通笔记本 F12 冠盟主板 F11或F12 海尔笔记本 F12 富士康主板 ESC或F11 方正笔记本 F12 顶星主板 F11或F12 清华同方笔记本 F12 铭瑄主板 ESC 微星笔记本 F11 盈通主板 F8 明基笔记本 F9 捷波主板 ESC 技嘉笔记本 F12 Inter主板 F12 雷神笔记本 F12或ESC 杰微主板 ESC或F8 机械革命 F10 致铭主板 F12 未来人类 F7 磐英主板 ESC Gateway F12 磐正主板 ESC eMachines F12 冠铭主板 F9 小米笔记本 F12 苹果笔记本 长按”option”键 注：其他机型请尝试或参考以上品牌常用启动热键 选择PE启动选择从Win10 PE启动（一般UEFI启动会自动进） EXI系统安装进PE系统后，双击运行桌面的“EIX系统安装”工具（EasyImageX） 也可以在PE中手动Ghost还原安装 选择安装位置按照下图顺序选择”安装位置”和”镜像文件”，然后点”一键恢复”. 在弹出确认窗口中，去掉”自动运行万能驱动“和”操作完成后自动重启计算机“ 注：一定要取消勾选操作完成后自动重启计算机 这一项 ，不然装好系统后U盘在系统里也占用了 一个盘符，会导致盘符错乱。 系统恢复中恢复中，等待完成后根据需要运行万能驱动程序。 然后手动重启计算机 等屏幕熄灭的同时迅速拔掉U 盘，不然会再次进入PE系统。 等待系统安装完成系统安装过程 等待完成","categories":[],"tags":[{"name":"win10","slug":"win10","permalink":"https://ylfei.github.io/tags/win10/"},{"name":"系统安装","slug":"系统安装","permalink":"https://ylfei.github.io/tags/%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"}],"keywords":[]},{"title":"在GitHub上搭建Hexo","slug":"在GitHub上搭建Hexo","date":"2022-04-25T07:19:00.000Z","updated":"2025-01-28T01:31:22.675Z","comments":true,"path":"posts/62306.html","link":"","permalink":"https://ylfei.github.io/posts/62306.html","excerpt":"","text":"GitHub Pages 是什么？ GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面。 Hexo 是什么？ Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页。 Hexo + GitHub 文章发布原理在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。 Hexo部署到Ghthub 安装git官网地址：https://git-scm.com 访问官方网站，下载对应的安装包，进行安装 安装完成后，鼠标右键可以看到：Git Bash Here,点击后打开 1git --version 安装nodejs官网地址：https://nodejs.org 访问nodejs官方网站，下载对应的安装包，进行安装 安装完成后，配置环境变量，并在终端里面输入： 1node -v 安装Hexo 1npm install hexo -g 测试是否安装成功 1hexo -v 初始化Hexo 新建一个blog文件夹 1hexo init 可以看到博客存放目录里出现了相关文件 生成静态网页12hexo g # 生成静态网页hexo s # 本地预览 在本地浏览器访问：http://localhost:4000/ 安装hexo依赖1npm install hexo-deployer-git --save Git配置在blog文件夹下打开git输入 12git config --global user.email \"注册github时使用的邮箱\"git config --global user.name \"github的用户名\" 生成git公钥 1ssh-keygen -t rsa -C \"you email@126.com\"提示输入passphrase时可直接回车 使用记事本打开id_rsa.pub复制内容文件在C:\\Users\\你的用户名\\.ssh目录下 进入github登录点击头像→Settings→SSH and GPG keys→New SSH key→在Title中输入hexo博客在key的文本框中输入复制的内容→Add SSH key 在Git Bash中输入 1ssh -T git@github.com 出现Hi 用户名! You’ve successfully authenticated, but GitHub does not provide shell access.则证明成功！ 打开_config.yml进行修改补全如下代码 repo即你的仓库https地址 1234deploy: type: git repo: git@github.com:your_name/your_name.github.io.git branch: main 其中your_name需要替换为你的github的账号 现在需要执行以下命令 就可以发布自己的博客了。每次新建完文章之后部署，也是相同命令 123hexo clean # 清除本地缓存hexo g # 重新生成静态页面hexo d # 部署到git","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://ylfei.github.io/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","permalink":"https://ylfei.github.io/tags/GitHub/"}],"keywords":[]},{"title":"网线水晶头制作及标准接法","slug":"网线水晶头制作及标准接法","date":"2021-11-16T03:12:23.000Z","updated":"2023-05-01T09:13:02.654Z","comments":true,"path":"posts/13455.html","link":"","permalink":"https://ylfei.github.io/posts/13455.html","excerpt":"","text":"一、制作工具介绍首先介绍一下制作水晶头需要用到的工具——网线钳。价格也不贵 普通用户都能接受，从网上或是线下都能买到。 我们主要用到网线钳的三个功能——剥线、剪线和压制水晶头。其中最后一个功能，是网线钳独有的 ，也是它的主要功能。在压制水晶头的过程中，只需要用到网线钳 压制水晶头，利用的是水晶头槽这一部分。网线钳一般带有多种规格的槽（大小不同） ，但压制网线时，只需要用到8P槽。 使用时也很简单，将网线插入水晶头后，把水晶 头放入槽内，用力按压即可。 二、水晶头的制作网线水晶头的制作方法（共五步） 第一步、剥把网线外层绝缘皮剥开，露出里面的彩色绝缘皮——剥线时要注意力度，不要伤害到内层绝缘皮。 第二步、排排线是水晶头制作的重头戏，即把网线的线色按照顺序排好。现在的网线都是”双绞线”， 就是指里面的细小电线都是两两缠绕在一起的，共有4组，也就是8根。 在这8根线里，有4根线都是白色的，为了在名称上区分它们，我们在它们自身线色的 基础上加上与它相绞的线的颜色为它命名。比如和橙色线缠绕在一起的白色线，就叫 做”橙白色线”（或者”白橙色线”）；和蓝色线缠绕在一起的白色线，就叫做”蓝白色” （或”白蓝色线”）。 排线顺序有两个标准，分别叫做T568A和T568B——两种排法没有本质上的区别，但是在选择 时有规定……敲黑板，这里很重要：两种接线顺序在选择上有两种选法：交叉线和直通线。交叉线是指同一根网线的两个水晶头分 别选用不同接法；直通线是指同一根网线的两个水晶头选用同一种接法。 交叉线一般用于同一类设备之间的连接，比如电脑和电脑、路由器和路由器（现在也有支持 直通线的设备，但保险起见，还是用交叉线比较好）。直通线用于不同类设备之间的连接， 比如电脑和路由器。很明显，家庭中更适合直通线。所以，在家庭中，一般所有水晶头都只选用一种排线 方法——T568A或T568B任选其一。 T568A的排线顺序为：绿白，绿，橙白，蓝，蓝白，橙，棕白，棕； T568B的排线顺序为：橙白，橙，绿白，蓝，蓝白，绿，棕白，棕。 T568A 线序的适用范围 这种接法用于网络设备需要交叉互连的场合，所谓交叉是指网线的一端 和另一端与 RJ45 网线插头的接法不同，一端按 T568A 线序接，另 一端按 T568B 线序接，即有几根网线在另一端是先做了交叉才接到 RJ45 插头上去的，适用的连接场合有： 电 脑←→电 脑，称对等网连接，即两台电脑之间只通过一条网线连接就可以互相传递数据； 集线器←→集线器； 交换机←→交换机。 T568A 线序的接法 如图所示，RJ45型网线插头各脚与网线颜色标志的对应关系是： ——绿白 ——绿 ——橙白 ——蓝 ——蓝白 ——橙 ——棕白 ——棕 T568B 线序的接法 如图所示，RJ45型网线插头各脚与网线颜色标志的对应关系是： ——橙白 ——橙 ——绿白 ——蓝 ——蓝白 ——绿 ——棕白 ——棕 第三步、剪把网线的顺序排好了，握在手里，捏住、压好——一定要压好，把线放到网线钳中，剪断。剪线的目的是把8根网线剪齐，所以，如果一次没剪齐，要再次进行修剪——把网线捏紧了再剪有助于增加成功率。 第四步、插把剪好的网线按顺序插入水晶头——不需要剥掉线皮。在插入水晶头时，要注意两点： 应面对水晶头的背面，也就是不带卡槽按压按钮的那一面插入； 网线插入水晶头后，应保证网线外绝缘皮有一部分在水晶头内，如果出现 内层绝缘皮外露，应再次重复剪线的步骤。 第五步、压把水晶头放入网线钳8P槽内，用力压紧即可。 最后，需要使用测线仪测试一下，看网线是否能够使用。","categories":[],"tags":[{"name":"网线","slug":"网线","permalink":"https://ylfei.github.io/tags/%E7%BD%91%E7%BA%BF/"},{"name":"水晶头","slug":"水晶头","permalink":"https://ylfei.github.io/tags/%E6%B0%B4%E6%99%B6%E5%A4%B4/"}],"keywords":[]},{"title":"神秘的C盘里面装了什么","slug":"神秘的C盘里面装了什么","date":"2019-09-11T02:17:26.000Z","updated":"2025-01-28T01:30:23.032Z","comments":true,"path":"posts/28356.html","link":"","permalink":"https://ylfei.github.io/posts/28356.html","excerpt":"","text":"大家刚刚接触电脑时，都会被提醒“你可千万别动C盘！”点开一看，密密麻麻的文件夹 让人不知所云。所以，神秘的C盘里面到底藏了什么东西？下面将进行全面解读。 C盘根目录常见文件夹Documents and Settings/用户 ：Windows 7中的“用户”文件夹其实就是XP中的Documents and Settings文件夹， 这里储存了用户的设置，包括用户、文档、上网浏览信息、配置文件等数据。 DownIoads ：这通常是下载软件的默认下载路径，建议修改软件设置改到其他硬盘分区。Drivers ：部分驱动程序的文件夹。Favorites ：收藏夹。Program Files ： 应用程序文件夹，一般软件默认都安装在这里，也有一些系统自带的应用 程序。在Windows 7系统中，64位用户会多出一个Program Files(X86） 文件夹，这是系统中32位软件的安装目录。Program Data ： Windows 7的系统文件夹，放置程序的使用数据、设置等文件，不建议删除。Windows ：存放操作系统主要文件，非常重要。Temp ：存放系统或其他软件临时文件，需经常清理。hiberfil.sys ： 系统的休眠功能所占用的硬盘空间的文件，不建议删除。pagefile.sys ： 虚拟内存页面文件，不建议删除。PerfLogs ： Windows Vista或Windows 7系统日志，记录如磁盘扫描错误等信息，没有必要删除。 Document and settings/用户常见文件夹 默认情况下位于系统分区根目录下，包括： Administrator、All Users、Default User、用户文件夹等。All Users针对所有用户， 这里的更改对所有用户有效，Administrator针对系统管理员账户。 桌面【开始】菜单Application Data ： 通用应用程序数据文件夹。Favorites ：收藏夹。Local Settings ：保存应用程序数据、历史和临时文件，可清理。MyDocuments ：我的文档。NetHood ：网络共享目录。PrintHood ：打印共享目录。Recent ：最近打开的文档。SendTo ：鼠标右键的“发送到”。Templates ：存储着常用程序的模板文件。Temp : 临时文件目录，在系统和软件的运行过程中产生的临时文件就存放于此。Temporary Internet Files ：IE下载文件的缓存区。 ProgramFiles常见文件夹Common FileS ： 共用程序文件夹，用于同系列不同程序软件共同使用或调用数据，比如微软和Adobe的各种软件。ComPlus Applications ： 微软COM＋组件使用的文件夹，删除后可能引起COM＋组件不能运行。DIFX ： DIFX是一种高效的XML索引方法，此文件夹与数据索引有关，不可以删除。Internet Explorer ： 系统自带的IE浏览器，删除后可能导致部分程序不能正常运行。1nstallShield Installation Information ： 专门存储安装程序信息的文件夹，用于某些程序的卸载和更新。MSECache ：MS Office运行时自动创建。MSXML 6.0 ：微软XML解析器程序的文件夹。microsoft frontpage ： FrontPage是微软推出的一款网页设计软件，此文件夹通常为空。Movie Maker ：系统自带的一款视频编辑软件。MSN Gaming Zone ：一些系统自带的扑克牌等小游戏，可以删除。Netmeeting ：系统自带的网上聊天软件。0utlook Express ：Outlook Express是Windows内置的邮件收发端，不用可删。Online Services ：网络服务文件夹，不能删。Windows Media Player ：系统自带的一款多媒体播放器。WinRAR ：一款流行的压缩解压缩软件。Xerox ： 用作自带的一些图像处理软件的临时空间，文件夹不能删除，但通常为空。","categories":[],"tags":[{"name":"系统","slug":"系统","permalink":"https://ylfei.github.io/tags/%E7%B3%BB%E7%BB%9F/"}],"keywords":[]},{"title":"UEFI+GPT与BIOS+MBR有什么区别","slug":"UEFI-GPT与BIOS-MBR有什么区别","date":"2019-09-08T16:00:00.000Z","updated":"2023-05-01T09:13:02.647Z","comments":true,"path":"posts/55889.html","link":"","permalink":"https://ylfei.github.io/posts/55889.html","excerpt":"","text":"现在绝大多数系统都是UEFI+GPT或BIOS+MBR模式安装的，那么他们之间有什么区别呢? 首先是硬盘分区GPT与MBR的区别 MBR磁盘最多支持4个主分区，再增加分区只能用逻辑分区; 微软设定GPT磁盘支持128个主分区(理论可支持无限多个)。 MBR磁盘最大仅支持2TB硬盘，GPT磁盘最大支持18EB硬盘(1EB=1048576TB) GPT分区磁盘有备份分区表来提高分区数据结构的完整性。 GPT只能安装64位的系统，MBR可以安装32位与64位。 UEFI与BIOS的区别BIOS和UEFI都是引导操作系统启动的必须介质，传统BIOS启动系统 的过程中相比与UEFI启动多了一个BIOS自检环节，所以启动速度相对比较慢。 BIOS下启动操作系统之前，必须从硬盘MBR主引导记录中读取系统启动代码， 然后从活动分区中引导启动操作系统，因为BIOS不能识别GPT分区，所以BIOS 模式下不能用GPT分区安装系统。 传统BIOS运行流程 graph LR A(开 机) --&gt; B[BIOS初始化] --&gt; C[BIOS自检] --&gt; D[引导操作系统] --&gt; E(进入系统) 在UEFI下启动操作系统，不再需要主引导记录，也不再需要活动分区， 在开机方面相比BIOS少了自检这一步，因此它的启动速度更快。 操作界面上UEFI采用的图形化界面，并且支持中文。而BIOS全部都是 英语。UEFI的图形化界面可以让用户更快的了解功能。 UEFI运行流程 graph LR A(开 机) --&gt; B[UEFI初始化] --&gt; D[引导操作系统]--&gt; E(进入系统) 现在大部分新电脑都是UEFI+GPT模式了，这种模式更适合现在的win10、 win8系统，这种模式不能直接安装win7系统，这也是为什么很多新电脑 安装win7前都要调整分区与设置BIOS的原因。","categories":[],"tags":[{"name":"UEFI","slug":"UEFI","permalink":"https://ylfei.github.io/tags/UEFI/"},{"name":"BIOS","slug":"BIOS","permalink":"https://ylfei.github.io/tags/BIOS/"},{"name":"主板","slug":"主板","permalink":"https://ylfei.github.io/tags/%E4%B8%BB%E6%9D%BF/"},{"name":"MBR","slug":"MBR","permalink":"https://ylfei.github.io/tags/MBR/"},{"name":"GPT","slug":"GPT","permalink":"https://ylfei.github.io/tags/GPT/"}],"keywords":[]},{"title":"计算机网络中的IP地址","slug":"计算机网络中的IP地址","date":"2019-09-07T16:00:00.000Z","updated":"2023-05-01T09:18:09.470Z","comments":true,"path":"posts/29942.html","link":"","permalink":"https://ylfei.github.io/posts/29942.html","excerpt":"","text":"特殊的IP地址 0.0.0.0 严格说来，这个奇葩的地址0.0.0.0已经不是一个真正意义上 的IP地址了。它表示的是这样一个集合：也就是说；所有不清 楚的主机和目的网络。这里的“不清楚”是指在本机的路由表里 没有特定条目指明如何到达。对本机来说，它就是一个“收容所”， 所有不认识的“三无”人员，一律送进去。如果你在网络设置中设 置了缺省网关，那么计算机系统会自动产生一个目的地址为0.0.0.0的缺省路由。 255.255.255.255限制广播地址 对本机来说，这个地址指本网段内(同一广播域)的所有主机。 然而它的意思很明确，使用人类语言来说意思就是“这里的所 有计算机都注意了”这个地址不能被路由器所转发。 127.0.0.1本机地址 主要用于测试。用汉语表示，就是“我自己”。在Windows系统 中，这个地址有一个别名“Localhost”。寻址这样一个地址， 是不能把它发到网络接口的。除非出错，否则在传输介质上永 远不应该出现目的地址为“127.0.0.1”的数据包。 224.0.0.1 组播地址 注意它和广播的区别。从224.0.0.0到239.255.255.255都是 这样的地址。224.0.0.1特指所有主机，224.0.0.2特指所有 路由器。这样的地址多用于一些特定的程序以及多媒体程序。 如果你的主机开启了IRDP(Internet路由发现协议），使用组 播功能功能，那么你的主机路由表中应该有这样一条路由。 169.254.x.x 如果你的主机使用了DHCP功能自动获得一个IP地址，那么 当你的DHCP服务器发生故障，或响应时间太长而超出了一 个系统规定的时间，计算机操作系统会为你分配这样一个 地址。如果你发现你的主机IP地址是一个诸如此类的地址， 很不幸的是，现在你的网络不能正常运行了。 10.x.x.x；172.16.0.0—172.31.255.254；192.168.x.x；私有地址 这些地址被大量用于企业内部网络中。一些宽带路由器，也 往往使用192.168.1.1作为缺省地址。私有网络由于不与外 部互连，因而可能使用随意的IP地址。保留这样的地址供其 使用是为了避免以后接入公网时引起地址混乱。使用私有地 址的私有网络在接入Internet时，要使用地址翻译(NAT)， 将私有地址翻译成公用合法地址。在Internet上，这类地址 是不能出现的。对一台网络上的主机来说，它可以正常接收 的合法目的网络地址有三种：本机的IP地址、广播地址以及 组播地址。 IP地址的分类 A类地址 A类IP地址 ：由1个字节的网络地址和3个字节的主机地址，网络地址的最高位必须是“0”。如：0XXXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX（X代表0或1）A类IP地址范围 ：1.0.0.1—126.255.255.254 A类IP地址中的私有地址和保留地址： 10.X.X.X是私有地址（所谓的私有地址就是在互联网上不使用，而被用在局域网络中的地址）。范围（10.0.0.1—10.255.255.254） 127.X.X.X是保留地址，用做循环测试用的。 B类地址 B类IP地址： 由2个字节的网络地址和2个字节的主机地址，网络地址的最高位必须是“10”。 如：10XXXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX（X代表0或1）B类IP地址范围： 128.0.0.1—191.255.255.254。 B类IP地址的私有地址和保留地址： 172.16.0.0—172.31.255.254是私有地址 169.254.X.X是保留地址。如果你的IP地址是自动获取IP地址， 而在网络上又没有找到可用的DHCP服务器。就会得到其中一个IP。 191.255.255.255是广播地址，不能分配。 C类地址 C类IP地址： 由3个字节的网络地址和1个字节的主机地址，网络地址的最高位必须是“110”。如：110XXXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX（X代表0或1）C类IP地址范围： 192.0.0.1—223.255.255.254。 C类地址中的私有地址：192.168.X.X是私有地址。（192.168.0.1—192.168.255.255) 4、D类地址 D类地址： 不分网络地址和主机地址，它的第1个字节的前四位固定为1110。如：1110XXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX（X代表0或1）D类地址范围： 224.0.0.1—239.255.255.254 5、E类地址E类地址： 不分网络地址和主机地址，它的第1个字节的前四位固定为 1111。如：1111XXXX.XXXXXXXX.XXXXXXXX.XXXXXXXX（X代表0或1）E类地址范围： 240.0.0.1—255.255.255.254","categories":[],"tags":[{"name":"IP","slug":"IP","permalink":"https://ylfei.github.io/tags/IP/"},{"name":"网络","slug":"网络","permalink":"https://ylfei.github.io/tags/%E7%BD%91%E7%BB%9C/"}],"keywords":[]},{"title":"了解计算机物理接口","slug":"了解计算机物理接口","date":"2019-09-05T05:16:15.000Z","updated":"2023-05-01T09:13:02.648Z","comments":true,"path":"posts/15023.html","link":"","permalink":"https://ylfei.github.io/posts/15023.html","excerpt":"","text":"","categories":[],"tags":[],"keywords":[]},{"title":"计算机硬件系统基础","slug":"计算机硬件系统基础","date":"2019-09-02T04:55:36.000Z","updated":"2023-05-01T09:13:02.656Z","comments":true,"path":"posts/26787.html","link":"","permalink":"https://ylfei.github.io/posts/26787.html","excerpt":"","text":"计算机想要正常运行，除了软件以外，硬件则显得尤为重要。这些硬件分别是主板， cpu，显卡，内存，硬盘，电源以及各种输入输出设备，例如鼠标键盘显示器音响等。 CPU 是计算机的核心，用于处理计算机软件中的数据，电脑运行的快 慢与cpu的关系非常大。目前市场上的cpu主要由AMD公司和intel公司设计制造。 主板 一个计算机系统的基本，是计算机的主电路板。所有其他的硬 件模块都由主板上的各种接口进行连接，目前市场上的主板供应商多且杂，需要大家仔细甄别。 显卡 用于处理计算机中的图像数据，例如视频渲染和游戏渲染，卡吧基佬便是这个卡。想要 获得更好的游戏和图像处理的性能，升级显卡是最重要的一个途径。目前主流的显卡设计商 分别是AMD公司和NVIDIA公司。一般来讲（误），AMD的显卡在图像处理的表现更好，而NVIDIA 公司的显卡在游戏性能上有着AMD显卡难以企及的表现。 内存 用于周转硬盘与cpu要处理的数据。由于硬盘的的读取写入速度较慢，所以当cpu要处理 一个数据是，并不是直接在硬盘中处理，而是先读取在内存中，再由cpu进行处理。如果直接 在硬盘中进行处理，便会大大拖慢cpu的速度。内存不需要太大，4G或者8G便能满足日常需求。 硬盘 就如同计算机的仓库，它速度较慢，但胜在容量大，造价便宜，所以用于存储数据再好不过。 目前主流的硬盘分为机械硬盘和固态硬盘两种，固态硬盘相较机械硬盘造价稍贵，但性能更好。 电源 计算机并不是直接使用220V市电，电源便是将220v市电压降压成计算机需要的电压， 好的电源是计算机稳定运行的基本。","categories":[],"tags":[{"name":"系统","slug":"系统","permalink":"https://ylfei.github.io/tags/%E7%B3%BB%E7%BB%9F/"},{"name":"硬件","slug":"硬件","permalink":"https://ylfei.github.io/tags/%E7%A1%AC%E4%BB%B6/"}],"keywords":[]}]}